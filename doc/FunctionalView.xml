<!-- Maintainer: kkaempf@suse.de, ma@suse.de -->

<chapter><title>Functional View</title>

<section><title>5.1 Abstract functional blocks</title>

<para>
By abstracting from a (physical) medium to a general 'installation source',
(<emphasis>InstSrc</emphasis>) handling different installation sources like 'CD', 'NFS', 'local harddisk', etc.
can be generalized.
The different installation sources are handled by a installation source
manager (<emphasis>InstSrcMgr</emphasis>).
For selections, packages, and patches, the installation source is just
an additional attribute and does not add to dependency complexity.
</para>
<para>
Every system has a single installation target (<emphasis>InstTarget</emphasis>), usually a mounted directory
(with an rpm database). The installation target is automatically also an
installation source 'providing' (already installed) packages to the
dependency solver.
</para>
<para>
The dependency solver has access to the installation source manager which
can be queried for data. The different installation sources are handled
transparently by the installation source manager. The solver does not
have any knowledge about the sources.
The solver is controlled from outside (user interface) and can use
callbacks/return codes to handle resolving dependencies
(conflicts, or-dependencies, etc.).
</para>
	  <mediaobject>
	    <imageobject>
	      <!-- Formate OK: PNG -->
	      <imagedata fileref="./block_diagram.png" depth="30" scalefit="1"/>
	    </imageobject>
	    <caption>
	      <para>
		A picture of the book cover.
	      </para>
	    </caption>
	  </mediaobject>
</section>

<section><title>5.2 Installation Source</title>

<para>
An installation source has general information (data about the source)
and detailed information (data about packages) transparently.
It's up to the implementation how to handle this data, e.g. by storing
cache files for offline access or retrieving packages for detailed
data.
Splitting the general and detailed information part also on the
implementation side leads to a 'package provider' function (<emphasis>PkgProv</emphasis>).
Since
this is also needed during package installation (in order to actually
get the package onto the target system), it is implemented as
a separate function block.

An installation source contains
<itemizedlist>
<listitem><para>name
</para></listitem>
<listitem><para>version
</para></listitem>
<listitem><para>architecture
</para></listitem>
<listitem><para>dependencies (requires, provides, conflicts, recommends, suggests)
  e.g Product 'email server 3.1' needs 'basic system 8.1'.
</para></listitem>
<listitem><para>label (descriptive text, in various languages)
</para></listitem>
<listitem><para>language (if package is language specific)
</para></listitem>
<listitem><para>vendor
</para></listitem>
<listitem><para>flags (internal usage)
</para></listitem>
<listitem><para>medium (type of medium, like cd, ftp, etc.)
</para></listitem>
<listitem><para>ID-Code
</para></listitem>
<listitem><para>cache file
</para></listitem>
<listitem><para>MD5 sum (for the cache file) ?
</para></listitem>
<listitem><para>GPG signature
</para></listitem>
</itemizedlist>
</para>

<para>
An installation source instance is created for every known
installation media. The target system is also regarded as an installation
media.
</para>

</section>
<section><title>5.3 Installation Target</title>

<para>
The package management handles a single installation target. Besides the
above mentioned installation source block, an installation target contains
a package provider block (getting the package onto the target) and a package
installer block (i.e. actually calling rpm). For each needed installation
target, one package provider is needed.
The notion of 'package' as used above is a bit misleading since the
data to be installed on a target might be a package (currently rpm based)
or a patch. Both need different installer functionalities.
</para>
<para>
The installation target provides the following functions
<itemizedlist>
<listitem><para>install package
</para></listitem>
<listitem><para>set install flags (i.e. --excludedocs)
</para></listitem>
<listitem><para>delete package
</para></listitem>
<listitem><para>set delete flags
</para></listitem>
<listitem><para>rebuilddb
</para></listitem>
<listitem><para>verify
</para></listitem>
</itemizedlist>
</para>

<para>
These are basically the functions 'rpm' is providing on a command
line level.
</para>

</section>
<section><title>5.4 Dependency Solving</title>

<para>
The solver gets a list of installed and a list of requested (selected)
packages and resolves conflicts.
The solver should be general enough to also handle selections and
patches which are represented by similar data.
</para>

<para>
Solver actions are triggered by the user interface.
</para>

</section>
<section><title>5.5 Selections</title>

<para>
A selection is a set of packages and described by the following attributes
</para>
<para>
<itemizedlist>
<listitem><para>name</para></listitem>
<listitem><para>version</para></listitem>
<listitem><para>architecture (if selection applies to specific architectures)</para></listitem>
<listitem><para>dependencies (requires, provides, conflicts, recommends, suggests)</para></listitem>
<listitem><para>label (descriptive text, in various languages)</para></listitem>
<listitem><para>language (if selection is language specific)</para></listitem>
<listitem><para>vendor</para></listitem>
<listitem><para>flags (internal usage)</para></listitem>
<listitem><para>MD5 sum</para></listitem>
<listitem><para>GPG signature</para></listitem>
</itemizedlist>
</para>

</section>
<section><title>5.6 Packages</title>

<para>
A package is a set of files and described by the following attributes
<itemizedlist>
<listitem><para>name
</para></listitem>
<listitem><para>version
</para></listitem>
<listitem><para>architecture
</para></listitem>
<listitem><para>dependencies (requires, provides, conflicts, recommends, suggests)
</para></listitem>
<listitem><para>label (descriptive text, in various languages)
</para></listitem>
<listitem><para>language (if package is language specific)
</para></listitem>
<listitem><para>vendor
</para></listitem>
<listitem><para>flags (internal usage)
</para></listitem>
<listitem><para>MD5 sum (immediately before package installation, cant do this across
  ftp).
</para></listitem>
<listitem><para>GPG signature
</para></listitem>
</itemizedlist>
</para>

</section>
<section><title>5.7 Patches</title>

<para>
A patch is a set of system changes described by the following attributes
<itemizedlist>
<listitem><para>name
</para></listitem>
<listitem><para>version
</para></listitem>
<listitem><para>architecture
</para></listitem>
<listitem><para>dependencies (requires, provides, conflicts, recommends, suggests)
</para></listitem>
<listitem><para>label (descriptive text, in various languages)
</para></listitem>
<listitem><para>vendor
</para></listitem>
<listitem><para>flags (internal usage)
</para></listitem>
<listitem><para>MD5 sum
</para></listitem>
<listitem><para>GPG signature
</para></listitem>
<listitem><para>Set of Text, Script, or packages in any combination.
</para></listitem>
</itemizedlist>
</para>
</section>
</chapter>


